
terminal PROGRAM, BREAK, CLASS, INTERFACE, ENUM, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, FOR, EXTENDS, CONTINUE, IMPLEMENTS;
terminal IDENT;
terminal NUMBER, CHAR, BOOL;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUALS, NOT_EQUALS, GREATER_THAN, GREATER_THAN_EQUALS, LESS_THAN, LESS_THAN_EQUALS;
terminal AND, OR;
terminal ASSIGN;
terminal INC, DEC;
terminal COMMA, SEMICOLON, PERIOD;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;

non terminal Program;
non terminal DeclarationsList, MethodDeclarationList;
non terminal SingleDeclaration, ConstDecl, VarDecl, ClassDecl, EnumDecl, InterfaceDecl;
non terminal SingleOrMultipleConstDecl, SingleConstDecl, ConstValue;
non terminal SingleOrMultipleEnumDecl, SingleEnumDecl, EnumOption;
non terminal SingleOrMultipleVarDecl, SingleVarDecl, ArrayOption;
non terminal ExtendsOption, ImplementsOption, VarDeclList, ClassMethodDeclOption;
non terminal ImplementedInterfacesList, ImplementedInterface, InterfaceMethodDeclarationList;
non terminal InterfaceMethodDecl, MethodDecl;
non terminal ReturnType, FormParsOption, StatementList;
non terminal FormPars, SingleFormPar;
non terminal Type;
non terminal Statement, ElseOption, DesignatorStatementOption, ConditionOption, ExprOption, PrintOption;
non terminal DesignatorStatement, DesignatorStatementOptions, ActParsOption;
non terminal ActPars, SingleActPar;
non terminal Condition, CondTerm, CondFact, CondFactOption;
non terminal Expr, MinusOption, SingleExpr, Term, Factor, FactorDesignatorOption, NewOption;
non terminal Designator;
non terminal Assignop, Relop, Addop, Mulop;

Program ::= PROGRAM IDENT DeclarationsList LEFT_BRACE MethodDeclarationList RIGHT_BRACE;

DeclarationsList ::= DeclarationsList SingleDeclaration
                     |
                     /* epsilon */ ;
                     
MethodDeclarationList ::= MethodDeclarationList MethodDecl
                          |
                          /* epsilon */ ;
                     
SingleDeclaration ::= ConstDecl
                      |
                      VarDecl
                      |
                      ClassDecl
                      |
                      EnumDecl
                      |
                      InterfaceDecl ;
                      
ConstDecl ::= CONST Type SingleOrMultipleConstDecl SEMICOLON;

SingleOrMultipleConstDecl ::= SingleOrMultipleConstDecl COMMA SingleConstDecl
                              |
                              SingleConstDecl;
                              
SingleConstDecl ::= IDENT ASSIGN ConstValue;

ConstValue ::= NUMBER
               |
               CHAR
               |
               BOOL ;
               
EnumDecl ::= ENUM IDENT LEFT_BRACE SingleOrMultipleEnumDecl RIGHT_BRACE;

SingleOrMultipleEnumDecl ::= SingleOrMultipleEnumDecl COMMA SingleEnumDecl
                             |
                             SingleEnumDecl;
                             
SingleEnumDecl ::= IDENT EnumOption;

EnumOption ::= ASSIGN NUMBER
               |
               /* epsilon */ ;
               
VarDecl ::= Type SingleOrMultipleVarDecl SEMICOLON;

SingleOrMultipleVarDecl ::= SingleOrMultipleVarDecl COMMA SingleVarDecl
                            |
                            SingleVarDecl;
                            
SingleVarDecl ::= IDENT ArrayOption;

ArrayOption ::= LEFT_BRACKET RIGHT_BRACKET
                |
                /* epsilon */;
                
ClassDecl ::= CLASS IDENT ExtendsOption ImplementsOption LEFT_BRACE VarDeclList ClassMethodDeclOption RIGHT_BRACE;

ExtendsOption ::= EXTENDS Type
                  |
                  /* epsilon */ ;
                  
ImplementsOption ::= IMPLEMENTS ImplementedInterfacesList
                     |
                     /* epsilon */ ;
                     
ImplementedInterfacesList ::= ImplementedInterfacesList COMMA ImplementedInterface
                              |
                              ImplementedInterface;
                              
ImplementedInterface ::= Type;

VarDeclList ::= VarDeclList VarDecl
                |
                /* epsilon */;
                     
ClassMethodDeclOption ::= LEFT_BRACE MethodDeclarationList RIGHT_BRACE
                          |
                          /* epsilon */ ;
                          
InterfaceDecl ::= INTERFACE IDENT LEFT_BRACE InterfaceMethodDeclarationList RIGHT_BRACE;

InterfaceMethodDeclarationList ::= InterfaceMethodDeclarationList InterfaceMethodDecl
                                   |
                                   /* epsilon */;
                                   
InterfaceMethodDecl ::= ReturnType IDENT LEFT_PARENTHESIS FormParsOption RIGHT_PARENTHESIS SEMICOLON;

MethodDecl ::= ReturnType IDENT LEFT_PARENTHESIS FormParsOption RIGHT_PARENTHESIS VarDeclList LEFT_BRACE StatementList RIGHT_BRACE;

ReturnType ::= Type
               |
               VOID;
               
FormParsOption ::= FormPars
                   |
                   /* epsilon */;
                   
StatementList ::= StatementList Statement
                  |
                  /* epsilon */ ;
                  
FormPars ::= FormPars COMMA SingleFormPar
             |
             SingleFormPar;
             
SingleFormPar ::= Type IDENT ArrayOption;

Type ::= IDENT;

Statement ::= DesignatorStatement SEMICOLON
              |
              IF LEFT_PARENTHESIS Condition RIGHT_PARENTHESIS Statement ElseOption
              |
              FOR LEFT_PARENTHESIS DesignatorStatementOption SEMICOLON ConditionOption SEMICOLON DesignatorStatementOption RIGHT_PARENTHESIS Statement
              |
              BREAK SEMICOLON
              |
              CONTINUE SEMICOLON
              |
              RETURN ExprOption SEMICOLON
              |
              READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON
              |
              PRINT LEFT_PARENTHESIS Expr PrintOption RIGHT_PARENTHESIS SEMICOLON
              |
              LEFT_BRACE StatementList RIGHT_BRACE ;
              
ElseOption ::= ELSE Statement
               |
               /* epsilon */;
               
DesignatorStatementOption ::= DesignatorStatement
                              |
                              /* epsilon */ ;
                              
ConditionOption ::= Condition
                    |
                    /* epsilon */ ;
                    
ExprOption ::= Expr
               |
               /* epsilon */ ;
               
PrintOption ::= COMMA NUMBER
                |
                /* epsilon */ ;
                
DesignatorStatement ::= Designator DesignatorStatementOptions;

DesignatorStatementOptions ::= Assignop Expr
                               |
                               LEFT_PARENTHESIS ActParsOption RIGHT_PARENTHESIS
                               |
                               INC
                               |
                               DEC ;
                               
ActParsOption ::= ActPars
                  |
                  /* epsilon */ ;
                  
ActPars ::= ActPars COMMA SingleActPar
            |
            SingleActPar ;
            
SingleActPar ::= Expr ;

Condition ::= Condition OR CondTerm
              |
              CondTerm ;
              
CondTerm ::= CondTerm AND CondFact
             |
             CondFact ;
             
CondFact ::= Expr CondFactOption ;

CondFactOption ::= Relop Expr
                   |
                   /* epsilon */ ;
                   
Expr ::= MinusOption SingleExpr; 
         
MinusOption ::= MINUS
                |
                /* epsilon */ ;
                
SingleExpr ::= SingleExpr Addop Term
               |
               Term;
                
Term ::= Term Mulop Factor
         |
         Factor;
         
Factor ::= Designator FactorDesignatorOption
           |
           NUMBER
           |
           CHAR
           |
           BOOL
           |
           NEW Type NewOption
           |
           LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS
           ;
           
FactorDesignatorOption = LEFT_PARENTHESIS ActParsOption RIGHT_PARENTHESIS
                         |
                         /* epsilon */ ;
                         
NewOption ::= LEFT_BRACKET Expr RIGHT_BRACKET
              |
              /* epsilon */ ;
              
Designator ::= Designator PERIOD IDENT
               |
               Designator NewOption
               |
               IDENT ; 
               
Assignop ::= ASSIGN;

Relop ::= EQUALS
          |
          NOT_EQUALS
          |
          GREATER_THAN
          |
          GREATER_THAN_EQUALS
          |
          LESS_THAN
          |
          LESS_THAN_EQUALS ;
          
Addop ::= PLUS
          |
          MINUS ;
          
Mulop ::= MUL
          |
          DIV
          |
          MOD ;