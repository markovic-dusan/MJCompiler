
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	Boolean syntaxErrorFound = false;   
   
    // redefined error methods
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        //report_error("Syntax Error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal Error, parsing interrupted", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info != null) {
    		log.info (info.getClass());
    		log.info (info);
		}
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	
	Symbol s = this.getScanner().next_token();
	/*if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString()); */
	return s;
	
:}

terminal PROGRAM, BREAK, CONST, CLASS, EXTENDS, IMPLEMENTS, ENUM, INTERFACE, IF, ELSE, FOR, NEW, PRINT, READ, RETURN, VOID, CONTINUE;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUALS, NOT_EQUALS, GREATER_THAN, GREATER_THAN_EQUALS, LESS_THAN, LESS_THAN_EQUALS;
terminal AND, OR, ASSIGN, INC, DEC;
terminal SEMICOLON, COMMA, PERIOD;
terminal LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET, LEFT_PARENTHESIS, RIGHT_PARENTHESIS;

non terminal Program, ProgramName, DeclarationsList, Decl, MethodDeclarationsList;
non terminal ConstDecl, ConstSyntaxCheck, MultipleConstDecl, SingleConstDecl, SingleConstDeclSyntaxCheck, ConstName, ConstValue;
non terminal EnumDecl, EnumSyntaxCheck, EnumName, MultipleEnumElemDecl, SingleEnumElemDecl, SingleEnumElemDeclSyntaxCheck, EnumValueOption;
non terminal VarDecl, VarSyntaxCheck, MultipleVarDecl, SingleVarDeclSyntaxCheck, SingleVarDecl, ArrayOption;
non terminal ClassDecl, ClassName, ExtendsOption, ExtendsSyntaxCheck, ImplementsOption, ImplementsSyntaxCheck, InterfaceList, InterfaceImplemented;
non terminal ClassVarDeclList, ClassVarDeclSyntaxCheck, ClassVarDeclCheck, MultipleClassVarDecl, SingleClassVarDecl, ClassVarArrayOption;
non terminal ClassMethodsOption, ClassMethodDeclarationsList, ClassMethodDecl, ClassMethodName, ClassMethodVarDeclList, ClassMethodVarDeclSyntaxCheck, ClassMethodVarDeclCheck, MultipleClassMethodVarDecl, SingleClassMethodVarDecl, ClassMethodVarName, ClassMethodVarArrayOption;
non terminal InterfaceDecl, InterfaceName, InterfaceSyntaxCheck, InterfaceMethodDeclarationList;
non terminal InterfaceMethodDecl, InterfaceMethodName, ReturnType, FormParsOption;
non terminal MethodDecl, MethodName, MethodVarDeclList, MethodVarDeclSyntaxCheck, MethodVarDeclCheck, MultipleMethodVarDecl, SingleMethodVarDecl, MethodVarArrayOption, StatementList;
non terminal Type;
non terminal FormPars, SingleFormPar, FormParArrayOption;
non terminal Statement, MatchedStatement, UnmatchedStatement, MatchedDesignatorStatement, ConditionSyntaxCheck, FirstForDesignatorOption, ForConditionOption, SecondForDesignatorOption, ReturnExprOption, PrintOption;
non terminal DesignatorStatement, ActParamsOption;
non terminal ActPars;
non terminal Condition;
non terminal CondTerm;
non terminal CondFact;
non terminal Expr, MinusOption, Expression;
non terminal Term;
non terminal Factor;
non terminal Designator;
non terminal Assignop;
non terminal Relop;
non terminal Addop;
non terminal Mulop;

Program ::= (Program) PROGRAM ProgramName DeclarationsList LEFT_BRACE MethodDeclarationsList RIGHT_BRACE ;

ProgramName ::= (ProgramName) IDENT:programName ;

DeclarationsList ::= (GlobalDeclarations) DeclarationsList Decl
                     |
                     (NoGlobalDeclarations) /* epsilon */ ;

Decl ::= (ConstDeclaration) ConstDecl
         |
         (GlobalVariableDeclaration) VarDecl
         | 
         (ClassDeclaration) ClassDecl
         | 
         (EnumDeclaration) EnumDecl 
         | 
         (InterfaceDeclaration) InterfaceDecl ;
                     
MethodDeclarationsList ::= (GlobalMethodsDeclarations) MethodDeclarationsList MethodDecl
                           |
                           (NoGlobalMethodsDeclarations) /* epsilon */ ;                           

         
ConstDecl ::= (ConstDecl) CONST ConstSyntaxCheck SEMICOLON ; 

ConstSyntaxCheck ::= (ConstDeclSuccess) Type:constType MultipleConstDecl
                     |
                     (ConstDeclError) error:e 
                     {: parser.report_error("Syntax Error on line " + eleft + "; error in constant declaration", null); parser.syntaxErrorFound = true; :}  ;

MultipleConstDecl ::= (MultipleConstDeclaration) MultipleConstDecl COMMA SingleConstDecl
                      |
                      (SingleConstDeclaration) SingleConstDecl ;
                      
SingleConstDecl ::= (SingleConstDecl) SingleConstDeclSyntaxCheck; 

SingleConstDeclSyntaxCheck ::= (SingleConstDeclSuccess) ConstName:constName ASSIGN ConstValue:constValue
                               |
                               (SingleConstDeclError) error:e
                               {: parser.report_error("Syntax Error on line " + eleft + "; error in constant declaration", null); parser.syntaxErrorFound = true; :} ;

ConstName ::= (ConstName) IDENT:constName ;

ConstValue ::= (NumConst) NUMBER:numberValue
               |
               (CharConst) CHAR:charValue
               |
               (BoolConst) BOOL:boolValue ;
               
EnumDecl ::= (EnumDecl) ENUM EnumSyntaxCheck RIGHT_BRACE ;

EnumSyntaxCheck ::= (EnumDeclSuccess) EnumName LEFT_BRACE MultipleEnumElemDecl 
                    |
                    (EnumDeclError) error:e
                    {: parser.report_error("5Syntax Error on line " + eleft + "; error in enum declaration", null);  parser.syntaxErrorFound = true; :}  ;
                    
EnumName ::= (EnumName) IDENT:enumName ;
                    
MultipleEnumElemDecl ::= (MultipleEnumElemDeclaration) MultipleEnumElemDecl COMMA SingleEnumElemDecl
                         |
                         (SingleEnumElemDeclaration) SingleEnumElemDecl ;
                         
SingleEnumElemDecl ::= (SingleEnumElemDecl) SingleEnumElemDeclSyntaxCheck;

SingleEnumElemDeclSyntaxCheck ::= (SingleEnumElemDeclSuccess) IDENT:enumElemName EnumValueOption
                                  |
                                  (SingleEnumElemDeclError) error:e 
                                  {: parser.report_error("6Syntax Error on line " + eleft + "; error in enum declaration", null); parser.syntaxErrorFound = true; :} ;

EnumValueOption ::= (EnumElemValue) ASSIGN NUMBER:enumValue
                    |
                    (NoEnumElemValue) /* epsilon */ ;
VarDecl ::= (VarDecl) VarSyntaxCheck SEMICOLON ;               

VarSyntaxCheck ::= (VarDeclSuccess) Type:varType MultipleVarDecl 
                   |
                   (VarDeclError) error:e
                   {: parser.report_error("3Syntax Error on line " + eleft + "; error in variable declaration", null); parser.syntaxErrorFound = true; :} ;

MultipleVarDecl ::= (MultipleVarDeclaration) MultipleVarDecl COMMA SingleVarDecl
                    |
                    (SingleVarDeclaration) SingleVarDecl ;
                    
SingleVarDecl ::= (SingleVarDecl) SingleVarDeclSyntaxCheck; 

SingleVarDeclSyntaxCheck ::= (SingleVarDeclSuccess) IDENT:varName ArrayOption
                             |
                             (SingleVarDeclError) error:e
                             {: parser.report_error("4Syntax Error on line " + eleft + "; error in variable declaration", null); parser.syntaxErrorFound = true; :} ;

ArrayOption ::= (ArrayVariable) LEFT_BRACKET RIGHT_BRACKET
                |
                (NoArrayVariable) /* epsilon */ ;
                
ClassDecl ::= (ClassDecl) CLASS ClassName ExtendsOption ImplementsOption LEFT_BRACE ClassVarDeclList ClassMethodsOption RIGHT_BRACE ;

ClassName ::= (ClassName) IDENT:className;

ExtendsOption ::= (ClassInheritance) ExtendsSyntaxCheck
                  |
                  (NoClassInheritance) /* epsilon */ ;
                  
ExtendsSyntaxCheck ::= (ClassInheritanceSuccess) EXTENDS Type:superClassType
                       |
                       (ClassInheritanceError) EXTENDS error:e
                       {: parser.report_error("4Syntax Error on line " + eleft + "; error in class inheritance", null); parser.syntaxErrorFound = true; :} ;
                       
ImplementsOption ::= (InterfaceImplementation) ImplementsSyntaxCheck
                     |
                     (NoInterfaceImplementation) /* epsilon */ ;
                     
ImplementsSyntaxCheck ::= (InterfaceImplementationSuccess) IMPLEMENTS InterfaceList
                          |
                          (InterfaceImplementationError) IMPLEMENTS error:e
                          {: parser.report_error("4Syntax Error on line " + eleft + "; error in class interface implementation declaration", null); parser.syntaxErrorFound = true; :} ;
                          
InterfaceList ::= (MultipleInterfaces) InterfaceList COMMA InterfaceImplemented
                  |
                  (SingleInterface) InterfaceImplemented ;

InterfaceImplemented ::= (InterfaceImplemented) Type:interfaceType ;

ClassVarDeclList ::= (ClassVarDeclarations) ClassVarDeclList ClassVarDeclSyntaxCheck
                     |
                     (NoClassVarDeclarations) /* epsilon */ ;                

ClassVarDeclSyntaxCheck ::= (ClassVarDeclarationsSuccess) ClassVarDeclCheck SEMICOLON
                            |
                            (ClassVarDeclarationsError) error:e 
                            {: parser.report_error("4Syntax Error on line " + eleft + "; error in class field declaration", null); parser.syntaxErrorFound = true; :} ;
                            
ClassVarDeclCheck ::= (ClassVarDeclSuccess) Type:classVarType MultipleClassVarDecl
                      |
                      (ClassVarDeclError) error:e
                      {: parser.report_error("4Syntax Error on line " + eleft + "; error in class field declaration", null); parser.syntaxErrorFound = true; :};
                      
MultipleClassVarDecl ::= (MultipleClassVariableDeclarations) MultipleClassVarDecl COMMA SingleClassVarDecl
                         |
                         (SingleClassVariableDeclaration) SingleClassVarDecl ;
                         
SingleClassVarDecl ::= (SingleClassVarDecl) IDENT:classVarName ClassVarArrayOption ;

ClassVarArrayOption ::= (ClassArrayVariable) LEFT_BRACKET RIGHT_BRACKET
                        |
                        (NoClassArrayVariable) /* epsilon */ ;
                        
ClassMethodsOption ::= (ClassMethodBraces) LEFT_BRACE ClassMethodDeclarationsList RIGHT_BRACE
                       |
                       (NoClassMethodBraces) /* epsilon */ ;

ClassMethodDeclarationsList ::= (ClassMethodsDeclarations) ClassMethodDeclarationsList ClassMethodDecl
                                |
                                (NoClassMethodsDeclarations) /* epsilon */ ;        

InterfaceDecl ::= (InterfaceDecl) INTERFACE InterfaceSyntaxCheck RIGHT_BRACE ;         

InterfaceSyntaxCheck ::= (InterfaceDeclSuccess) InterfaceName LEFT_BRACE InterfaceMethodDeclarationList
                         |
                         (InterfaceDeclError) error:e
                         {: parser.report_error("4Syntax Error on line " + eleft + "; error in interface declaration", null); parser.syntaxErrorFound = true; :} ;     
                         
InterfaceName ::= (InterfaceName) IDENT:interfaceName;   
                         
InterfaceMethodDeclarationList ::= (InterfaceMethods) InterfaceMethodDeclarationList InterfaceMethodDecl
                                   |
                                   (NoInterfaceMethods) /* epsilon */ ;   
                                   
InterfaceMethodDecl ::= (InterfaceMethodDecl) ReturnType InterfaceMethodName LEFT_PARENTHESIS FormParsOption RIGHT_PARENTHESIS SEMICOLON ;

InterfaceMethodName ::= (InterfaceMethodName) IDENT:interfaceMethodName;

MethodDecl ::= (MethodDecl) ReturnType MethodName LEFT_PARENTHESIS FormParsOption RIGHT_PARENTHESIS MethodVarDeclList LEFT_BRACE StatementList RIGHT_BRACE ;

MethodName ::= (MethodName) IDENT:methodName;

ClassMethodDecl ::= (ClassMethodDecl) ReturnType ClassMethodName LEFT_PARENTHESIS FormParsOption RIGHT_PARENTHESIS ClassMethodVarDeclList LEFT_BRACE StatementList RIGHT_BRACE ;

ClassMethodName ::= (ClassMethodName) IDENT:classMethodName; 

MethodVarDeclList ::= (MethodVarDeclarations) MethodVarDeclList MethodVarDeclSyntaxCheck
                      |
                      (NoMethodVarDeclarations) /* epsilon */ ;
                      
MethodVarDeclSyntaxCheck ::= (MethodVarDeclarationsSuccess) MethodVarDeclCheck SEMICOLON
                             |
                             (MethodVarDeclarationsError) error:e 
                             {: parser.report_error("4Syntax Error on line " + eleft + "; error in method variable declaration", null); parser.syntaxErrorFound = true; :} ;
                             
MethodVarDeclCheck ::= (MethodVarDeclSuccess) Type:methodVarType MultipleMethodVarDecl
                       |
                       (MethodVarDeclError) error:e
                       {: parser.report_error("4Syntax Error on line " + eleft + "; error in method variable declaration", null); parser.syntaxErrorFound = true; :};
                       
MultipleMethodVarDecl ::= (MultipleMethodVariableDeclarations) MultipleMethodVarDecl COMMA SingleMethodVarDecl
                          |
                          (SingleMethodVariableDeclaration) SingleMethodVarDecl ;
                          
SingleMethodVarDecl ::= (SingleMethodVarDecl) IDENT:methodVarName MethodVarArrayOption ;

MethodVarArrayOption ::= (MethodArrayVariable) LEFT_BRACKET RIGHT_BRACKET
                         |
                         (NoMethodArrayVariable) /* epsilon */ ;
                         
ClassMethodVarDeclList ::= (ClassMethodVarDeclarations) ClassMethodVarDeclList ClassMethodVarDeclSyntaxCheck
                           |
                           (NoClassMethodVarDeclarations) /* epsilon */ ;
                      
ClassMethodVarDeclSyntaxCheck ::= (ClassMethodVarDeclarationsSuccess) ClassMethodVarDeclCheck SEMICOLON
                                  |
                                  (ClassMethodVarDeclarationsError) error:e 
                                  {: parser.report_error("4Syntax Error on line " + eleft + "; error in class method variable declaration", null); parser.syntaxErrorFound = true; :} ;
                             
ClassMethodVarDeclCheck ::= (ClassMethodVarDeclSuccess) Type:classMethodVarType MultipleClassMethodVarDecl
                            |
                            (ClassMethodVarDeclError) error:e
                            {: parser.report_error("4Syntax Error on line " + eleft + "; error in class method variable declaration", null); parser.syntaxErrorFound = true; :};
                       
MultipleClassMethodVarDecl ::= (MultipleClassMethodVariableDeclarations) MultipleClassMethodVarDecl COMMA SingleClassMethodVarDecl
                               |
                               (SingleClassMethodVariableDeclaration) SingleClassMethodVarDecl ;
                          
SingleClassMethodVarDecl ::= (SingleClassMethodVarDecl) IDENT:classMethodVarName ClassMethodVarArrayOption ;

ClassMethodVarName ::= (ClassMethodVarName) IDENT:classMethodVarName;

ClassMethodVarArrayOption ::= (ClassMethodArrayVariable) LEFT_BRACKET RIGHT_BRACKET
                              |
                              (ClassMethodNoArrayVariable) /* epsilon */ ;

ReturnType ::= (NoVoidReturn) Type
               |
               (VoidReturn) VOID ;
               
FormParsOption ::= (FormalParameters) FormPars
                   |
                   (NoFormalParameters) /* epsilon */ ;
                   
StatementList ::= (Statements) StatementList Statement
                  |
                  (NoStatements) /* epsilon */ ;
                  
FormPars ::= (MultipleFormalParameters) FormPars COMMA SingleFormPar
             |
             (SingleFormalParameters) SingleFormPar ;
             
SingleFormPar ::= (SingleFormParSuccess) Type IDENT:formParName FormParArrayOption
                  |
                  (SingleFormParError) error:e
                  {: parser.report_error("4Syntax Error on line " + eleft + "; error in formal parameter declaration", null); parser.syntaxErrorFound = true; :} ;
                  
FormParArrayOption ::= (FormParArray) LEFT_BRACKET RIGHT_BRACKET
                       |
                       (FormParNoArray) /* epsilon */ ;
                       
Type ::= (Type) IDENT:typeName ;
                       
Statement ::= (MatchedStmt) MatchedStatement
              |
              (UnmatchedStmt) UnmatchedStatement ;
              
MatchedStatement ::= (MatchedDesignatorStmt) MatchedDesignatorStatement
                     |
                     (MatchedIfStatement) IF LEFT_PARENTHESIS ConditionSyntaxCheck RIGHT_PARENTHESIS MatchedStatement ELSE MatchedStatement
                     |
                     (MatchedForStatement) FOR LEFT_PARENTHESIS FirstForDesignatorOption SEMICOLON ForConditionOption SEMICOLON SecondForDesignatorOption RIGHT_PARENTHESIS MatchedStatement
                     |
                     (BreakStatement) BREAK SEMICOLON 
                     |
                     (ContinueStatement) CONTINUE SEMICOLON
                     |
                     (ReturnStatement) RETURN ReturnExprOption SEMICOLON
                     |
                     (ReadStatement) READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON
                     |
                     (PrintStatement) PRINT LEFT_PARENTHESIS Expr PrintOption RIGHT_PARENTHESIS SEMICOLON
                     |
                     (MultipleStatements) LEFT_BRACE StatementList RIGHT_BRACE ;
                     
UnmatchedStatement ::= (UnmatchedIfStatement) IF LEFT_PARENTHESIS ConditionSyntaxCheck RIGHT_PARENTHESIS Statement
                       |
                       (UnmatchedElseStatement) IF LEFT_PARENTHESIS ConditionSyntaxCheck RIGHT_PARENTHESIS MatchedStatement ELSE UnmatchedStatement
                       |
                       (UnmatchedForStatement) FOR LEFT_PARENTHESIS FirstForDesignatorOption SEMICOLON ForConditionOption SEMICOLON SecondForDesignatorOption RIGHT_PARENTHESIS UnmatchedStatement ;

ConditionSyntaxCheck ::= (ConditionSuccess) Condition
                         |
                         (ConditionError) error:e
                         {: parser.report_error("4Syntax Error on line " + eleft + "; error in logical condition", null); parser.syntaxErrorFound = true; :} ; 
                                                  
FirstForDesignatorOption ::= (FirstForDesignatorStatement) DesignatorStatement
                             |
                             (NoFirstForDesignatorStatement) /* epsilon */ ;
                             
ForConditionOption ::= (ForCondition) ConditionSyntaxCheck
                       |
                       (NoForCondition) /* epsilon */ ; 
                             
SecondForDesignatorOption ::= (SecondForDesignatorStatement) DesignatorStatement
                              |
                              (NoSecondForDesignatorStatement) /* epsilon */  ;        
                              
ReturnExprOption ::= (ReturnExpr) Expr
                     |
                     (NoReturnExpr) /* epsilon */ ;
                     
PrintOption ::= (PrintArg) COMMA NUMBER
                |
                (NoPrintArg) /* epsilon */ ;                 
MatchedDesignatorStatement ::= (MatchedDesignatorStatementSuccess) DesignatorStatement SEMICOLON
                               |
                               (MatchedDesignatorStatementError) error:e SEMICOLON
                               {: parser.report_error("4Syntax Error on line " + eleft + "; error in designator statement", null); parser.syntaxErrorFound = true; :}  ;

DesignatorStatement ::= (AssignStatementSuccess) Designator Assignop Expr
                        |
                        (AssignStatementError) Designator Assignop error:e
                        {: parser.report_error("4Syntax Error on line " + eleft + "; error in assign statement", null); parser.syntaxErrorFound = true; :} 
                        |
                        (MethodCallStatement) Designator LEFT_PARENTHESIS ActParamsOption RIGHT_PARENTHESIS
                        |
                        (IncrementStatement) Designator INC
                        |
                        (DecrementStatement) Designator DEC;
                        
ActParamsOption ::= (ActualParameters) ActPars
                    |
                    (NoActualParameters) /* epsilon */  ; 
                    
ActPars ::= (MultipleActualParameters) ActPars COMMA Expr
            |
            (SingleActualParameters) Expr ;
            
Condition ::= (MultipleTermCondition) Condition OR CondTerm
              |
              (SingleTermCondition) CondTerm ;
              
CondTerm ::= (MultipleFactTerm) CondTerm AND CondFact
             |
             (SingleFactTerm) CondFact ;

CondFact ::= (MultipleExprFact) Expr Relop Expr
             |
             (SingleExprFact) Expr ;
             
Expr ::= (MultipleTermExpr) Expr Addop Term
         |
         (SingleTermExpr) Term
         |
         (MinusSingleTermExpr) MINUS Term ;
               
Term ::= (MultipleFactorTerm) Term Mulop Factor
         |
         (SingleFactorTerm) Factor ;
             
Factor ::= (DeclDesignator) Designator
           |
           (MethodDesignator) Designator LEFT_PARENTHESIS ActParamsOption RIGHT_PARENTHESIS
           |
           (ConstFactor) ConstValue:constValue
           |
           (NewFactor) NEW Type
           |
           (NewArrayFactor) NEW Type LEFT_BRACKET Expr RIGHT_BRACKET
           |
           (CompositeFactor) LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS ;
           
Designator ::= (SimpleDesignator) IDENT:designName
               |
               (ClassOrEnumDesignator) Designator PERIOD IDENT:classOrEnumFieldName
               |
               (ArrayDesignator) Designator LEFT_BRACKET Expr RIGHT_BRACKET ;               

Assignop ::= (Assign) ASSIGN;

Relop ::= (Equals) EQUALS
          |
          (NotEquals) NOT_EQUALS
          |
          (GreaterThan) GREATER_THAN
          |
          (GreaterThanEquals) GREATER_THAN_EQUALS
          |
          (LessThan) LESS_THAN
          |
          (LessThanEquals) LESS_THAN_EQUALS ;
          
Addop ::= (Plus) PLUS
          |
          (Minus) MINUS ;
          
Mulop ::= (Mul) MUL
          |
          (Div) DIV
          |
          (Mod) MOD ; 
