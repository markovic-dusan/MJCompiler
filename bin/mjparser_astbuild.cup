
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	Boolean syntaxErrorFound = false;   
   
    // redefined error methods
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        //report_error("Syntax Error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal Error, parsing interrupted", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info != null) {
    		log.info (info.getClass());
    		log.info (info);
		}
    	if (info instanceof Symbol)
            msg.append (" on line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

:}

scan with {:
	
	Symbol s = this.getScanner().next_token();
	/*if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString()); */
	return s;
	
:}

terminal PROGRAM, BREAK, CONST, CLASS, EXTENDS, IMPLEMENTS, ENUM, INTERFACE, IF, ELSE, FOR, NEW, PRINT, READ, RETURN, VOID, CONTINUE;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUALS, NOT_EQUALS, GREATER_THAN, GREATER_THAN_EQUALS, LESS_THAN, LESS_THAN_EQUALS;
terminal AND, OR, ASSIGN, INC, DEC;
terminal SEMICOLON, COMMA, PERIOD;
terminal LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET, LEFT_PARENTHESIS, RIGHT_PARENTHESIS;

non terminal Program Program;
nonterminal ProgramName ProgramName;
nonterminal DeclarationsList DeclarationsList;
nonterminal Decl Decl;
nonterminal MethodDeclarationsList MethodDeclarationsList;
non terminal ConstDecl ConstDecl;
nonterminal ConstSyntaxCheck ConstSyntaxCheck;
nonterminal MultipleConstDecl MultipleConstDecl;
nonterminal SingleConstDecl SingleConstDecl;
nonterminal SingleConstDeclSyntaxCheck SingleConstDeclSyntaxCheck;
nonterminal ConstName ConstName;
nonterminal ConstValue ConstValue;
non terminal EnumDecl EnumDecl;
nonterminal EnumSyntaxCheck EnumSyntaxCheck;
nonterminal EnumName EnumName;
nonterminal MultipleEnumElemDecl MultipleEnumElemDecl;
nonterminal SingleEnumElemDecl SingleEnumElemDecl;
nonterminal SingleEnumElemDeclSyntaxCheck SingleEnumElemDeclSyntaxCheck;
nonterminal EnumValueOption EnumValueOption;
non terminal VarDecl VarDecl;
nonterminal VarSyntaxCheck VarSyntaxCheck;
nonterminal MultipleVarDecl MultipleVarDecl;
nonterminal SingleVarDeclSyntaxCheck SingleVarDeclSyntaxCheck;
nonterminal SingleVarDecl SingleVarDecl;
nonterminal ArrayOption ArrayOption;
non terminal ClassDecl ClassDecl;
nonterminal ClassName ClassName;
nonterminal ExtendsOption ExtendsOption;
nonterminal ExtendsSyntaxCheck ExtendsSyntaxCheck;
nonterminal ImplementsOption ImplementsOption;
nonterminal ImplementsSyntaxCheck ImplementsSyntaxCheck;
nonterminal InterfaceList InterfaceList;
nonterminal InterfaceImplemented InterfaceImplemented;
non terminal ClassVarDeclList ClassVarDeclList;
nonterminal ClassVarDeclSyntaxCheck ClassVarDeclSyntaxCheck;
nonterminal ClassVarDeclCheck ClassVarDeclCheck;
nonterminal MultipleClassVarDecl MultipleClassVarDecl;
nonterminal SingleClassVarDecl SingleClassVarDecl;
nonterminal ClassVarArrayOption ClassVarArrayOption;
non terminal ClassMethodsOption ClassMethodsOption;
nonterminal ClassMethodDeclarationsList ClassMethodDeclarationsList;
nonterminal ClassMethodDecl ClassMethodDecl;
nonterminal ClassMethodName ClassMethodName;
nonterminal ClassMethodVarDeclList ClassMethodVarDeclList;
nonterminal ClassMethodVarDeclSyntaxCheck ClassMethodVarDeclSyntaxCheck;
nonterminal ClassMethodVarDeclCheck ClassMethodVarDeclCheck;
nonterminal MultipleClassMethodVarDecl MultipleClassMethodVarDecl;
nonterminal SingleClassMethodVarDecl SingleClassMethodVarDecl;
nonterminal ClassMethodVarName ClassMethodVarName;
nonterminal ClassMethodVarArrayOption ClassMethodVarArrayOption;
non terminal InterfaceDecl InterfaceDecl;
nonterminal InterfaceName InterfaceName;
nonterminal InterfaceSyntaxCheck InterfaceSyntaxCheck;
nonterminal InterfaceMethodDeclarationList InterfaceMethodDeclarationList;
non terminal InterfaceMethodDecl InterfaceMethodDecl;
nonterminal InterfaceMethodName InterfaceMethodName;
nonterminal ReturnType ReturnType;
nonterminal FormParsOption FormParsOption;
non terminal MethodDecl MethodDecl;
nonterminal MethodName MethodName;
nonterminal MethodVarDeclList MethodVarDeclList;
nonterminal MethodVarDeclSyntaxCheck MethodVarDeclSyntaxCheck;
nonterminal MethodVarDeclCheck MethodVarDeclCheck;
nonterminal MultipleMethodVarDecl MultipleMethodVarDecl;
nonterminal SingleMethodVarDecl SingleMethodVarDecl;
nonterminal MethodVarArrayOption MethodVarArrayOption;
nonterminal StatementList StatementList;
non terminal Type Type;
non terminal FormPars FormPars;
nonterminal SingleFormPar SingleFormPar;
nonterminal FormParArrayOption FormParArrayOption;
non terminal Statement Statement;
nonterminal MatchedStatement MatchedStatement;
nonterminal UnmatchedStatement UnmatchedStatement;
nonterminal MatchedDesignatorStatement MatchedDesignatorStatement;
nonterminal ConditionSyntaxCheck ConditionSyntaxCheck;
nonterminal FirstForDesignatorOption FirstForDesignatorOption;
nonterminal ForConditionOption ForConditionOption;
nonterminal SecondForDesignatorOption SecondForDesignatorOption;
nonterminal ReturnExprOption ReturnExprOption;
nonterminal PrintOption PrintOption;
non terminal DesignatorStatement DesignatorStatement;
nonterminal ActParamsOption ActParamsOption;
non terminal ActPars ActPars;
non terminal Condition Condition;
non terminal CondTerm CondTerm;
non terminal CondFact CondFact;
non terminal Expr Expr;
nonterminal MinusOption MinusOption;
nonterminal Expression Expression;
non terminal Term Term;
non terminal Factor Factor;
non terminal Designator Designator;
non terminal Assignop Assignop;
non terminal Relop Relop;
non terminal Addop Addop;
non terminal Mulop Mulop;

Program ::= (Program) PROGRAM ProgramName:P1 DeclarationsList:D2 LEFT_BRACE MethodDeclarationsList:M3 RIGHT_BRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :} ;

ProgramName ::= (ProgramName) IDENT:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :} ;

DeclarationsList ::= (GlobalDeclarations) DeclarationsList:D1 Decl:D2 {: RESULT=new GlobalDeclarations(D1, D2); RESULT.setLine(D1left); :}
                     |
                     (NoGlobalDeclarations) {: RESULT=new NoGlobalDeclarations(); :} /* epsilon */ ;

Decl ::= (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
         |
         (GlobalVariableDeclaration) VarDecl:V1 {: RESULT=new GlobalVariableDeclaration(V1); RESULT.setLine(V1left); :}
         | 
         (ClassDeclaration) ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :}
         | 
         (EnumDeclaration) EnumDecl:E1 {: RESULT=new EnumDeclaration(E1); RESULT.setLine(E1left); :} 
         | 
         (InterfaceDeclaration) InterfaceDecl:I1 {: RESULT=new InterfaceDeclaration(I1); RESULT.setLine(I1left); :} ;
                     
MethodDeclarationsList ::= (GlobalMethodsDeclarations) MethodDeclarationsList:M1 MethodDecl:M2 {: RESULT=new GlobalMethodsDeclarations(M1, M2); RESULT.setLine(M1left); :}
                           |
                           (NoGlobalMethodsDeclarations) {: RESULT=new NoGlobalMethodsDeclarations(); :} /* epsilon */ ;                           

         
ConstDecl ::= (ConstDecl) CONST ConstSyntaxCheck:C1 SEMICOLON {: RESULT=new ConstDecl(C1); RESULT.setLine(C1left); :} ; 

ConstSyntaxCheck ::= (ConstDeclSuccess) Type:constType MultipleConstDecl:M1 {: RESULT=new ConstDeclSuccess(constType, M1); RESULT.setLine(constTypeleft); :}
                     |
                     (ConstDeclError) error:e 
                     {: parser.report_error("Syntax Error on line " + eleft + "; error in constant declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new ConstDeclError(); :}  ;

MultipleConstDecl ::= (MultipleConstDeclaration) MultipleConstDecl:M1 COMMA SingleConstDecl:S2 {: RESULT=new MultipleConstDeclaration(M1, S2); RESULT.setLine(M1left); :}
                      |
                      (SingleConstDeclaration) SingleConstDecl:S1 {: RESULT=new SingleConstDeclaration(S1); RESULT.setLine(S1left); :} ;
                      
SingleConstDecl ::= (SingleConstDecl) SingleConstDeclSyntaxCheck:S1 {: RESULT=new SingleConstDecl(S1); RESULT.setLine(S1left); :}; 

SingleConstDeclSyntaxCheck ::= (SingleConstDeclSuccess) ConstName:constName ASSIGN ConstValue:constValue {: RESULT=new SingleConstDeclSuccess(constName, constValue); RESULT.setLine(constNameleft); :}
                               |
                               (SingleConstDeclError) error:e
                               {: parser.report_error("Syntax Error on line " + eleft + "; error in constant declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new SingleConstDeclError(); :} ;

ConstName ::= (ConstName) IDENT:constName {: RESULT=new ConstName(constName); RESULT.setLine(constNameleft); :} ;

ConstValue ::= (NumConst) NUMBER:numberValue {: RESULT=new NumConst(numberValue); RESULT.setLine(numberValueleft); :}
               |
               (CharConst) CHAR:charValue {: RESULT=new CharConst(charValue); RESULT.setLine(charValueleft); :}
               |
               (BoolConst) BOOL:boolValue {: RESULT=new BoolConst(boolValue); RESULT.setLine(boolValueleft); :} ;
               
EnumDecl ::= (EnumDecl) ENUM EnumSyntaxCheck:E1 RIGHT_BRACE {: RESULT=new EnumDecl(E1); RESULT.setLine(E1left); :} ;

EnumSyntaxCheck ::= (EnumDeclSuccess) EnumName:E1 LEFT_BRACE MultipleEnumElemDecl:M2 {: RESULT=new EnumDeclSuccess(E1, M2); RESULT.setLine(E1left); :} 
                    |
                    (EnumDeclError) error:e
                    {: parser.report_error("5Syntax Error on line " + eleft + "; error in enum declaration", null);  parser.syntaxErrorFound = true; :} {: RESULT=new EnumDeclError(); :}  ;
                    
EnumName ::= (EnumName) IDENT:enumName {: RESULT=new EnumName(enumName); RESULT.setLine(enumNameleft); :} ;
                    
MultipleEnumElemDecl ::= (MultipleEnumElemDeclaration) MultipleEnumElemDecl:M1 COMMA SingleEnumElemDecl:S2 {: RESULT=new MultipleEnumElemDeclaration(M1, S2); RESULT.setLine(M1left); :}
                         |
                         (SingleEnumElemDeclaration) SingleEnumElemDecl:S1 {: RESULT=new SingleEnumElemDeclaration(S1); RESULT.setLine(S1left); :} ;
                         
SingleEnumElemDecl ::= (SingleEnumElemDecl) SingleEnumElemDeclSyntaxCheck:S1 {: RESULT=new SingleEnumElemDecl(S1); RESULT.setLine(S1left); :};

SingleEnumElemDeclSyntaxCheck ::= (SingleEnumElemDeclSuccess) IDENT:enumElemName EnumValueOption:E1 {: RESULT=new SingleEnumElemDeclSuccess(enumElemName, E1); RESULT.setLine(enumElemNameleft); :}
                                  |
                                  (SingleEnumElemDeclError) error:e 
                                  {: parser.report_error("6Syntax Error on line " + eleft + "; error in enum declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new SingleEnumElemDeclError(); :} ;

EnumValueOption ::= (EnumElemValue) ASSIGN NUMBER:enumValue {: RESULT=new EnumElemValue(enumValue); RESULT.setLine(enumValueleft); :}
                    |
                    (NoEnumElemValue) {: RESULT=new NoEnumElemValue(); :} /* epsilon */ ;
VarDecl ::= (VarDecl) VarSyntaxCheck:V1 SEMICOLON {: RESULT=new VarDecl(V1); RESULT.setLine(V1left); :} ;               

VarSyntaxCheck ::= (VarDeclSuccess) Type:varType MultipleVarDecl:M1 {: RESULT=new VarDeclSuccess(varType, M1); RESULT.setLine(varTypeleft); :} 
                   |
                   (VarDeclError) error:e
                   {: parser.report_error("3Syntax Error on line " + eleft + "; error in variable declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new VarDeclError(); :} ;

MultipleVarDecl ::= (MultipleVarDeclaration) MultipleVarDecl:M1 COMMA SingleVarDecl:S2 {: RESULT=new MultipleVarDeclaration(M1, S2); RESULT.setLine(M1left); :}
                    |
                    (SingleVarDeclaration) SingleVarDecl:S1 {: RESULT=new SingleVarDeclaration(S1); RESULT.setLine(S1left); :} ;
                    
SingleVarDecl ::= (SingleVarDecl) SingleVarDeclSyntaxCheck:S1 {: RESULT=new SingleVarDecl(S1); RESULT.setLine(S1left); :}; 

SingleVarDeclSyntaxCheck ::= (SingleVarDeclSuccess) IDENT:varName ArrayOption:A1 {: RESULT=new SingleVarDeclSuccess(varName, A1); RESULT.setLine(varNameleft); :}
                             |
                             (SingleVarDeclError) error:e
                             {: parser.report_error("4Syntax Error on line " + eleft + "; error in variable declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new SingleVarDeclError(); :} ;

ArrayOption ::= (ArrayVariable) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new ArrayVariable(); :}
                |
                (NoArrayVariable) {: RESULT=new NoArrayVariable(); :} /* epsilon */ ;
                
ClassDecl ::= (ClassDecl) CLASS ClassName:C1 ExtendsOption:E2 ImplementsOption:I3 LEFT_BRACE ClassVarDeclList:C4 ClassMethodsOption:C5 RIGHT_BRACE {: RESULT=new ClassDecl(C1, E2, I3, C4, C5); RESULT.setLine(C1left); :} ;

ClassName ::= (ClassName) IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};

ExtendsOption ::= (ClassInheritance) ExtendsSyntaxCheck:E1 {: RESULT=new ClassInheritance(E1); RESULT.setLine(E1left); :}
                  |
                  (NoClassInheritance) {: RESULT=new NoClassInheritance(); :} /* epsilon */ ;
                  
ExtendsSyntaxCheck ::= (ClassInheritanceSuccess) EXTENDS Type:superClassType {: RESULT=new ClassInheritanceSuccess(superClassType); RESULT.setLine(superClassTypeleft); :}
                       |
                       (ClassInheritanceError) EXTENDS error:e
                       {: parser.report_error("4Syntax Error on line " + eleft + "; error in class inheritance", null); parser.syntaxErrorFound = true; :} {: RESULT=new ClassInheritanceError(); :} ;
                       
ImplementsOption ::= (InterfaceImplementation) ImplementsSyntaxCheck:I1 {: RESULT=new InterfaceImplementation(I1); RESULT.setLine(I1left); :}
                     |
                     (NoInterfaceImplementation) {: RESULT=new NoInterfaceImplementation(); :} /* epsilon */ ;
                     
ImplementsSyntaxCheck ::= (InterfaceImplementationSuccess) IMPLEMENTS InterfaceList:I1 {: RESULT=new InterfaceImplementationSuccess(I1); RESULT.setLine(I1left); :}
                          |
                          (InterfaceImplementationError) IMPLEMENTS error:e
                          {: parser.report_error("4Syntax Error on line " + eleft + "; error in class interface implementation declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new InterfaceImplementationError(); :} ;
                          
InterfaceList ::= (MultipleInterfaces) InterfaceList:I1 COMMA InterfaceImplemented:I2 {: RESULT=new MultipleInterfaces(I1, I2); RESULT.setLine(I1left); :}
                  |
                  (SingleInterface) InterfaceImplemented:I1 {: RESULT=new SingleInterface(I1); RESULT.setLine(I1left); :} ;

InterfaceImplemented ::= (InterfaceImplemented) Type:interfaceType {: RESULT=new InterfaceImplemented(interfaceType); RESULT.setLine(interfaceTypeleft); :} ;

ClassVarDeclList ::= (ClassVarDeclarations) ClassVarDeclList:C1 ClassVarDeclSyntaxCheck:C2 {: RESULT=new ClassVarDeclarations(C1, C2); RESULT.setLine(C1left); :}
                     |
                     (NoClassVarDeclarations) {: RESULT=new NoClassVarDeclarations(); :} /* epsilon */ ;                

ClassVarDeclSyntaxCheck ::= (ClassVarDeclarationsSuccess) ClassVarDeclCheck:C1 SEMICOLON {: RESULT=new ClassVarDeclarationsSuccess(C1); RESULT.setLine(C1left); :}
                            |
                            (ClassVarDeclarationsError) error:e 
                            {: parser.report_error("4Syntax Error on line " + eleft + "; error in class field declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new ClassVarDeclarationsError(); :} ;
                            
ClassVarDeclCheck ::= (ClassVarDeclSuccess) Type:classVarType MultipleClassVarDecl:M1 {: RESULT=new ClassVarDeclSuccess(classVarType, M1); RESULT.setLine(classVarTypeleft); :}
                      |
                      (ClassVarDeclError) error:e
                      {: parser.report_error("4Syntax Error on line " + eleft + "; error in class field declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new ClassVarDeclError(); :};
                      
MultipleClassVarDecl ::= (MultipleClassVariableDeclarations) MultipleClassVarDecl:M1 COMMA SingleClassVarDecl:S2 {: RESULT=new MultipleClassVariableDeclarations(M1, S2); RESULT.setLine(M1left); :}
                         |
                         (SingleClassVariableDeclaration) SingleClassVarDecl:S1 {: RESULT=new SingleClassVariableDeclaration(S1); RESULT.setLine(S1left); :} ;
                         
SingleClassVarDecl ::= (SingleClassVarDecl) IDENT:classVarName ClassVarArrayOption:C1 {: RESULT=new SingleClassVarDecl(classVarName, C1); RESULT.setLine(classVarNameleft); :} ;

ClassVarArrayOption ::= (ClassArrayVariable) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new ClassArrayVariable(); :}
                        |
                        (NoClassArrayVariable) {: RESULT=new NoClassArrayVariable(); :} /* epsilon */ ;
                        
ClassMethodsOption ::= (ClassMethodBraces) LEFT_BRACE ClassMethodDeclarationsList:C1 RIGHT_BRACE {: RESULT=new ClassMethodBraces(C1); RESULT.setLine(C1left); :}
                       |
                       (NoClassMethodBraces) {: RESULT=new NoClassMethodBraces(); :} /* epsilon */ ;

ClassMethodDeclarationsList ::= (ClassMethodsDeclarations) ClassMethodDeclarationsList:C1 ClassMethodDecl:C2 {: RESULT=new ClassMethodsDeclarations(C1, C2); RESULT.setLine(C1left); :}
                                |
                                (NoClassMethodsDeclarations) {: RESULT=new NoClassMethodsDeclarations(); :} /* epsilon */ ;        

InterfaceDecl ::= (InterfaceDecl) INTERFACE InterfaceSyntaxCheck:I1 RIGHT_BRACE {: RESULT=new InterfaceDecl(I1); RESULT.setLine(I1left); :} ;         

InterfaceSyntaxCheck ::= (InterfaceDeclSuccess) InterfaceName:I1 LEFT_BRACE InterfaceMethodDeclarationList:I2 {: RESULT=new InterfaceDeclSuccess(I1, I2); RESULT.setLine(I1left); :}
                         |
                         (InterfaceDeclError) error:e
                         {: parser.report_error("4Syntax Error on line " + eleft + "; error in interface declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new InterfaceDeclError(); :} ;     
                         
InterfaceName ::= (InterfaceName) IDENT:interfaceName {: RESULT=new InterfaceName(interfaceName); RESULT.setLine(interfaceNameleft); :};   
                         
InterfaceMethodDeclarationList ::= (InterfaceMethods) InterfaceMethodDeclarationList:I1 InterfaceMethodDecl:I2 {: RESULT=new InterfaceMethods(I1, I2); RESULT.setLine(I1left); :}
                                   |
                                   (NoInterfaceMethods) {: RESULT=new NoInterfaceMethods(); :} /* epsilon */ ;   
                                   
InterfaceMethodDecl ::= (InterfaceMethodDecl) ReturnType:R1 InterfaceMethodName:I2 LEFT_PARENTHESIS FormParsOption:F3 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new InterfaceMethodDecl(R1, I2, F3); RESULT.setLine(R1left); :} ;

InterfaceMethodName ::= (InterfaceMethodName) IDENT:interfaceMethodName {: RESULT=new InterfaceMethodName(interfaceMethodName); RESULT.setLine(interfaceMethodNameleft); :};

MethodDecl ::= (MethodDecl) ReturnType:R1 MethodName:M2 LEFT_PARENTHESIS FormParsOption:F3 RIGHT_PARENTHESIS MethodVarDeclList:M4 LEFT_BRACE StatementList:S5 RIGHT_BRACE {: RESULT=new MethodDecl(R1, M2, F3, M4, S5); RESULT.setLine(R1left); :} ;

MethodName ::= (MethodName) IDENT:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :};

ClassMethodDecl ::= (ClassMethodDecl) ReturnType:R1 ClassMethodName:C2 LEFT_PARENTHESIS FormParsOption:F3 RIGHT_PARENTHESIS ClassMethodVarDeclList:C4 LEFT_BRACE StatementList:S5 RIGHT_BRACE {: RESULT=new ClassMethodDecl(R1, C2, F3, C4, S5); RESULT.setLine(R1left); :} ;

ClassMethodName ::= (ClassMethodName) IDENT:classMethodName {: RESULT=new ClassMethodName(classMethodName); RESULT.setLine(classMethodNameleft); :}; 

MethodVarDeclList ::= (MethodVarDeclarations) MethodVarDeclList:M1 MethodVarDeclSyntaxCheck:M2 {: RESULT=new MethodVarDeclarations(M1, M2); RESULT.setLine(M1left); :}
                      |
                      (NoMethodVarDeclarations) {: RESULT=new NoMethodVarDeclarations(); :} /* epsilon */ ;
                      
MethodVarDeclSyntaxCheck ::= (MethodVarDeclarationsSuccess) MethodVarDeclCheck:M1 SEMICOLON {: RESULT=new MethodVarDeclarationsSuccess(M1); RESULT.setLine(M1left); :}
                             |
                             (MethodVarDeclarationsError) error:e 
                             {: parser.report_error("4Syntax Error on line " + eleft + "; error in method variable declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new MethodVarDeclarationsError(); :} ;
                             
MethodVarDeclCheck ::= (MethodVarDeclSuccess) Type:methodVarType MultipleMethodVarDecl:M1 {: RESULT=new MethodVarDeclSuccess(methodVarType, M1); RESULT.setLine(methodVarTypeleft); :}
                       |
                       (MethodVarDeclError) error:e
                       {: parser.report_error("4Syntax Error on line " + eleft + "; error in method variable declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new MethodVarDeclError(); :};
                       
MultipleMethodVarDecl ::= (MultipleMethodVariableDeclarations) MultipleMethodVarDecl:M1 COMMA SingleMethodVarDecl:S2 {: RESULT=new MultipleMethodVariableDeclarations(M1, S2); RESULT.setLine(M1left); :}
                          |
                          (SingleMethodVariableDeclaration) SingleMethodVarDecl:S1 {: RESULT=new SingleMethodVariableDeclaration(S1); RESULT.setLine(S1left); :} ;
                          
SingleMethodVarDecl ::= (SingleMethodVarDecl) IDENT:methodVarName MethodVarArrayOption:M1 {: RESULT=new SingleMethodVarDecl(methodVarName, M1); RESULT.setLine(methodVarNameleft); :} ;

MethodVarArrayOption ::= (MethodArrayVariable) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new MethodArrayVariable(); :}
                         |
                         (NoMethodArrayVariable) {: RESULT=new NoMethodArrayVariable(); :} /* epsilon */ ;
                         
ClassMethodVarDeclList ::= (ClassMethodVarDeclarations) ClassMethodVarDeclList:C1 ClassMethodVarDeclSyntaxCheck:C2 {: RESULT=new ClassMethodVarDeclarations(C1, C2); RESULT.setLine(C1left); :}
                           |
                           (NoClassMethodVarDeclarations) {: RESULT=new NoClassMethodVarDeclarations(); :} /* epsilon */ ;
                      
ClassMethodVarDeclSyntaxCheck ::= (ClassMethodVarDeclarationsSuccess) ClassMethodVarDeclCheck:C1 SEMICOLON {: RESULT=new ClassMethodVarDeclarationsSuccess(C1); RESULT.setLine(C1left); :}
                                  |
                                  (ClassMethodVarDeclarationsError) error:e 
                                  {: parser.report_error("4Syntax Error on line " + eleft + "; error in class method variable declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new ClassMethodVarDeclarationsError(); :} ;
                             
ClassMethodVarDeclCheck ::= (ClassMethodVarDeclSuccess) Type:classMethodVarType MultipleClassMethodVarDecl:M1 {: RESULT=new ClassMethodVarDeclSuccess(classMethodVarType, M1); RESULT.setLine(classMethodVarTypeleft); :}
                            |
                            (ClassMethodVarDeclError) error:e
                            {: parser.report_error("4Syntax Error on line " + eleft + "; error in class method variable declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new ClassMethodVarDeclError(); :};
                       
MultipleClassMethodVarDecl ::= (MultipleClassMethodVariableDeclarations) MultipleClassMethodVarDecl:M1 COMMA SingleClassMethodVarDecl:S2 {: RESULT=new MultipleClassMethodVariableDeclarations(M1, S2); RESULT.setLine(M1left); :}
                               |
                               (SingleClassMethodVariableDeclaration) SingleClassMethodVarDecl:S1 {: RESULT=new SingleClassMethodVariableDeclaration(S1); RESULT.setLine(S1left); :} ;
                          
SingleClassMethodVarDecl ::= (SingleClassMethodVarDecl) IDENT:classMethodVarName ClassMethodVarArrayOption:C1 {: RESULT=new SingleClassMethodVarDecl(classMethodVarName, C1); RESULT.setLine(classMethodVarNameleft); :} ;

ClassMethodVarName ::= (ClassMethodVarName) IDENT:classMethodVarName {: RESULT=new ClassMethodVarName(classMethodVarName); RESULT.setLine(classMethodVarNameleft); :};

ClassMethodVarArrayOption ::= (ClassMethodArrayVariable) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new ClassMethodArrayVariable(); :}
                              |
                              (ClassMethodNoArrayVariable) {: RESULT=new ClassMethodNoArrayVariable(); :} /* epsilon */ ;

ReturnType ::= (NoVoidReturn) Type:T1 {: RESULT=new NoVoidReturn(T1); RESULT.setLine(T1left); :}
               |
               (VoidReturn) VOID {: RESULT=new VoidReturn(); :} ;
               
FormParsOption ::= (FormalParameters) FormPars:F1 {: RESULT=new FormalParameters(F1); RESULT.setLine(F1left); :}
                   |
                   (NoFormalParameters) {: RESULT=new NoFormalParameters(); :} /* epsilon */ ;
                   
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
                  |
                  (NoStatements) {: RESULT=new NoStatements(); :} /* epsilon */ ;
                  
FormPars ::= (MultipleFormalParameters) FormPars:F1 COMMA SingleFormPar:S2 {: RESULT=new MultipleFormalParameters(F1, S2); RESULT.setLine(F1left); :}
             |
             (SingleFormalParameters) SingleFormPar:S1 {: RESULT=new SingleFormalParameters(S1); RESULT.setLine(S1left); :} ;
             
SingleFormPar ::= (SingleFormParSuccess) Type:T1 IDENT:formParName FormParArrayOption:F2 {: RESULT=new SingleFormParSuccess(T1, formParName, F2); RESULT.setLine(T1left); :}
                  |
                  (SingleFormParError) error:e
                  {: parser.report_error("4Syntax Error on line " + eleft + "; error in formal parameter declaration", null); parser.syntaxErrorFound = true; :} {: RESULT=new SingleFormParError(); :} ;
                  
FormParArrayOption ::= (FormParArray) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new FormParArray(); :}
                       |
                       (FormParNoArray) {: RESULT=new FormParNoArray(); :} /* epsilon */ ;
                       
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;
                       
Statement ::= (MatchedStmt) MatchedStatement:M1 {: RESULT=new MatchedStmt(M1); RESULT.setLine(M1left); :}
              |
              (UnmatchedStmt) UnmatchedStatement:U1 {: RESULT=new UnmatchedStmt(U1); RESULT.setLine(U1left); :} ;
              
MatchedStatement ::= (MatchedDesignatorStmt) MatchedDesignatorStatement:M1 {: RESULT=new MatchedDesignatorStmt(M1); RESULT.setLine(M1left); :}
                     |
                     (MatchedIfStatement) IF LEFT_PARENTHESIS ConditionSyntaxCheck:C1 RIGHT_PARENTHESIS MatchedStatement:M2 ELSE MatchedStatement:M3 {: RESULT=new MatchedIfStatement(C1, M2, M3); RESULT.setLine(C1left); :}
                     |
                     (MatchedForStatement) FOR LEFT_PARENTHESIS FirstForDesignatorOption:F1 SEMICOLON ForConditionOption:F2 SEMICOLON SecondForDesignatorOption:S3 RIGHT_PARENTHESIS MatchedStatement:M4 {: RESULT=new MatchedForStatement(F1, F2, S3, M4); RESULT.setLine(F1left); :}
                     |
                     (BreakStatement) BREAK SEMICOLON {: RESULT=new BreakStatement(); :} 
                     |
                     (ContinueStatement) CONTINUE SEMICOLON {: RESULT=new ContinueStatement(); :}
                     |
                     (ReturnStatement) RETURN ReturnExprOption:R1 SEMICOLON {: RESULT=new ReturnStatement(R1); RESULT.setLine(R1left); :}
                     |
                     (ReadStatement) READ LEFT_PARENTHESIS Designator:D1 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
                     |
                     (PrintStatement) PRINT LEFT_PARENTHESIS Expr:E1 PrintOption:P2 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new PrintStatement(E1, P2); RESULT.setLine(E1left); :}
                     |
                     (MultipleStatements) LEFT_BRACE StatementList:S1 RIGHT_BRACE {: RESULT=new MultipleStatements(S1); RESULT.setLine(S1left); :} ;
                     
UnmatchedStatement ::= (UnmatchedIfStatement) IF LEFT_PARENTHESIS ConditionSyntaxCheck:C1 RIGHT_PARENTHESIS Statement:S2 {: RESULT=new UnmatchedIfStatement(C1, S2); RESULT.setLine(C1left); :}
                       |
                       (UnmatchedElseStatement) IF LEFT_PARENTHESIS ConditionSyntaxCheck:C1 RIGHT_PARENTHESIS MatchedStatement:M2 ELSE UnmatchedStatement:U3 {: RESULT=new UnmatchedElseStatement(C1, M2, U3); RESULT.setLine(C1left); :}
                       |
                       (UnmatchedForStatement) FOR LEFT_PARENTHESIS FirstForDesignatorOption:F1 SEMICOLON ForConditionOption:F2 SEMICOLON SecondForDesignatorOption:S3 RIGHT_PARENTHESIS UnmatchedStatement:U4 {: RESULT=new UnmatchedForStatement(F1, F2, S3, U4); RESULT.setLine(F1left); :} ;

ConditionSyntaxCheck ::= (ConditionSuccess) Condition:C1 {: RESULT=new ConditionSuccess(C1); RESULT.setLine(C1left); :}
                         |
                         (ConditionError) error:e
                         {: parser.report_error("4Syntax Error on line " + eleft + "; error in logical condition", null); parser.syntaxErrorFound = true; :} {: RESULT=new ConditionError(); :} ; 
                                                  
FirstForDesignatorOption ::= (FirstForDesignatorStatement) DesignatorStatement:D1 {: RESULT=new FirstForDesignatorStatement(D1); RESULT.setLine(D1left); :}
                             |
                             (NoFirstForDesignatorStatement) {: RESULT=new NoFirstForDesignatorStatement(); :} /* epsilon */ ;
                             
ForConditionOption ::= (ForCondition) ConditionSyntaxCheck:C1 {: RESULT=new ForCondition(C1); RESULT.setLine(C1left); :}
                       |
                       (NoForCondition) {: RESULT=new NoForCondition(); :} /* epsilon */ ; 
                             
SecondForDesignatorOption ::= (SecondForDesignatorStatement) DesignatorStatement:D1 {: RESULT=new SecondForDesignatorStatement(D1); RESULT.setLine(D1left); :}
                              |
                              (NoSecondForDesignatorStatement) {: RESULT=new NoSecondForDesignatorStatement(); :} /* epsilon */  ;        
                              
ReturnExprOption ::= (ReturnExpr) Expr:E1 {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
                     |
                     (NoReturnExpr) {: RESULT=new NoReturnExpr(); :} /* epsilon */ ;
                     
PrintOption ::= (PrintArg) COMMA NUMBER:N1 {: RESULT=new PrintArg(N1); RESULT.setLine(N1left); :}
                |
                (NoPrintArg) {: RESULT=new NoPrintArg(); :} /* epsilon */ ;                 
MatchedDesignatorStatement ::= (MatchedDesignatorStatementSuccess) DesignatorStatement:D1 SEMICOLON {: RESULT=new MatchedDesignatorStatementSuccess(D1); RESULT.setLine(D1left); :}
                               |
                               (MatchedDesignatorStatementError) error:e SEMICOLON
                               {: parser.report_error("4Syntax Error on line " + eleft + "; error in designator statement", null); parser.syntaxErrorFound = true; :} {: RESULT=new MatchedDesignatorStatementError(); :}  ;

DesignatorStatement ::= (AssignStatementSuccess) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new AssignStatementSuccess(D1, A2, E3); RESULT.setLine(D1left); :}
                        |
                        (AssignStatementError) Designator:D1 Assignop:A2 error:e
                        {: parser.report_error("4Syntax Error on line " + eleft + "; error in assign statement", null); parser.syntaxErrorFound = true; :} {: RESULT=new AssignStatementError(D1, A2); RESULT.setLine(D1left); :} 
                        |
                        (MethodCallStatement) Designator:D1 LEFT_PARENTHESIS ActParamsOption:A2 RIGHT_PARENTHESIS {: RESULT=new MethodCallStatement(D1, A2); RESULT.setLine(D1left); :}
                        |
                        (IncrementStatement) Designator:D1 INC {: RESULT=new IncrementStatement(D1); RESULT.setLine(D1left); :}
                        |
                        (DecrementStatement) Designator:D1 DEC {: RESULT=new DecrementStatement(D1); RESULT.setLine(D1left); :};
                        
ActParamsOption ::= (ActualParameters) ActPars:A1 {: RESULT=new ActualParameters(A1); RESULT.setLine(A1left); :}
                    |
                    (NoActualParameters) {: RESULT=new NoActualParameters(); :} /* epsilon */  ; 
                    
ActPars ::= (MultipleActualParameters) ActPars:A1 COMMA Expr:E2 {: RESULT=new MultipleActualParameters(A1, E2); RESULT.setLine(A1left); :}
            |
            (SingleActualParameters) Expr:E1 {: RESULT=new SingleActualParameters(E1); RESULT.setLine(E1left); :} ;
            
Condition ::= (MultipleTermCondition) Condition:C1 OR CondTerm:C2 {: RESULT=new MultipleTermCondition(C1, C2); RESULT.setLine(C1left); :}
              |
              (SingleTermCondition) CondTerm:C1 {: RESULT=new SingleTermCondition(C1); RESULT.setLine(C1left); :} ;
              
CondTerm ::= (MultipleFactTerm) CondTerm:C1 AND CondFact:C2 {: RESULT=new MultipleFactTerm(C1, C2); RESULT.setLine(C1left); :}
             |
             (SingleFactTerm) CondFact:C1 {: RESULT=new SingleFactTerm(C1); RESULT.setLine(C1left); :} ;

CondFact ::= (MultipleExprFact) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new MultipleExprFact(E1, R2, E3); RESULT.setLine(E1left); :}
             |
             (SingleExprFact) Expr:E1 {: RESULT=new SingleExprFact(E1); RESULT.setLine(E1left); :} ;
             
Expr ::= (MultipleTermExpr) Expr:E1 Addop:A2 Term:T3 {: RESULT=new MultipleTermExpr(E1, A2, T3); RESULT.setLine(E1left); :}
         |
         (SingleTermExpr) Term:T1 {: RESULT=new SingleTermExpr(T1); RESULT.setLine(T1left); :}
         |
         (MinusSingleTermExpr) MINUS Term:T1 {: RESULT=new MinusSingleTermExpr(T1); RESULT.setLine(T1left); :} ;
               
Term ::= (MultipleFactorTerm) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MultipleFactorTerm(T1, M2, F3); RESULT.setLine(T1left); :}
         |
         (SingleFactorTerm) Factor:F1 {: RESULT=new SingleFactorTerm(F1); RESULT.setLine(F1left); :} ;
             
Factor ::= (DeclDesignator) Designator:D1 {: RESULT=new DeclDesignator(D1); RESULT.setLine(D1left); :}
           |
           (MethodDesignator) Designator:D1 LEFT_PARENTHESIS ActParamsOption:A2 RIGHT_PARENTHESIS {: RESULT=new MethodDesignator(D1, A2); RESULT.setLine(D1left); :}
           |
           (ConstFactor) ConstValue:constValue {: RESULT=new ConstFactor(constValue); RESULT.setLine(constValueleft); :}
           |
           (NewFactor) NEW Type:T1 {: RESULT=new NewFactor(T1); RESULT.setLine(T1left); :}
           |
           (NewArrayFactor) NEW Type:T1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new NewArrayFactor(T1, E2); RESULT.setLine(T1left); :}
           |
           (CompositeFactor) LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new CompositeFactor(E1); RESULT.setLine(E1left); :} ;
           
Designator ::= (SimpleDesignator) IDENT:designName {: RESULT=new SimpleDesignator(designName); RESULT.setLine(designNameleft); :}
               |
               (ClassOrEnumDesignator) Designator:D1 PERIOD IDENT:classOrEnumFieldName {: RESULT=new ClassOrEnumDesignator(D1, classOrEnumFieldName); RESULT.setLine(D1left); :}
               |
               (ArrayDesignator) Designator:D1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new ArrayDesignator(D1, E2); RESULT.setLine(D1left); :} ;               

Assignop ::= (Assign) ASSIGN {: RESULT=new Assign(); :};

Relop ::= (Equals) EQUALS {: RESULT=new Equals(); :}
          |
          (NotEquals) NOT_EQUALS {: RESULT=new NotEquals(); :}
          |
          (GreaterThan) GREATER_THAN {: RESULT=new GreaterThan(); :}
          |
          (GreaterThanEquals) GREATER_THAN_EQUALS {: RESULT=new GreaterThanEquals(); :}
          |
          (LessThan) LESS_THAN {: RESULT=new LessThan(); :}
          |
          (LessThanEquals) LESS_THAN_EQUALS {: RESULT=new LessThanEquals(); :} ;
          
Addop ::= (Plus) PLUS {: RESULT=new Plus(); :}
          |
          (Minus) MINUS {: RESULT=new Minus(); :} ;
          
Mulop ::= (Mul) MUL {: RESULT=new Mul(); :}
          |
          (Div) DIV {: RESULT=new Div(); :}
          |
          (Mod) MOD {: RESULT=new Mod(); :} ; 
